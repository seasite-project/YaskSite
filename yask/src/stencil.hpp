/*****************************************************************************

YASK: Yet Another Stencil Kernel
Copyright (c) 2014-2017, Intel Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.

*****************************************************************************/

// This file defines functions, types, and macros needed for the stencil
// kernel.

#ifndef STENCIL_HPP
#define STENCIL_HPP

// Auto-generated macros from foldBuilder.
// It's important that this be included before realv.hpp
// to properly set the vector lengths.
#include "stencil_macros.hpp"

// Define a folded vector of reals.
#include "realv.hpp"

// Other utilities.
#include "utils.hpp"

// macro for debug message.
#ifdef TRACE
#define TRACE_MSG0(os, msg) ((os) << "YASK: " << msg << std::endl << std::flush)
#else
#define TRACE_MSG0(os, msg) ((void)0)
#endif

// macro for debug message from a StencilContext method.
#define TRACE_MSG1(msg) TRACE_MSG0(get_ostr(), msg)
#define TRACE_MSG(msg) TRACE_MSG1(msg)
 
// macro for debug message when _context ptr is defined.
#define TRACE_MSG2(msg) TRACE_MSG0(_context->get_ostr(), msg)
 
// Cluster sizes in vectors.
// This are defaults to override those generated by foldBuilder
// in stencil_macros.hpp.
#ifndef CLEN_T
#define CLEN_T (1)
#endif
#ifndef CLEN_W
#define CLEN_W (1)
#endif
#ifndef CLEN_X
#define CLEN_X (1)
#endif
#ifndef CLEN_Y
#define CLEN_Y (1)
#endif
#ifndef CLEN_Z
#define CLEN_Z (1)
#endif

// Cluster sizes in points.
// This is the number of scalar results calculated by each
// call to the calc_vector function(s) generated by foldBuilder
// in stencil_code.hpp.
#define CPTS_T (CLEN_T * VLEN_T)
#define CPTS_W (CLEN_W * VLEN_W)
#define CPTS_X (CLEN_X * VLEN_X)
#define CPTS_Y (CLEN_Y * VLEN_Y)
#define CPTS_Z (CLEN_Z * VLEN_Z)
#define CPTS (CLEN_T * CPTS_W * CPTS_X * CPTS_Y * CPTS_Z)

// default sizes.
#ifndef DEF_PROBLEM_SIZE
#define DEF_PROBLEM_SIZE (256)
#endif
#ifndef DEF_WAVEFRONT_REGION_SIZE
#define DEF_WAVEFRONT_REGION_SIZE (128)
#endif
#ifndef DEF_BLOCK_SIZE
#define DEF_BLOCK_SIZE (32)
#endif

// Memory-accessing code.
#include "mem_macros.hpp"
#include "realv_grids.hpp"

// First/last index macros.
// These are relative to global problem, not rank.
#define FIRST_INDEX(dim) (0)
#define LAST_INDEX(dim) (_context->tot_ ## dim - 1)

namespace yask {

    // Default grid layouts.
    // Last number in 'Layout' name has unit stride, e.g.,
    // LAYOUT_WXYZ Layout_1234 => unit-stride in z.
    // LAYOUT_WXYZ Layout_1243 => unit-stride in y.
#ifndef LAYOUT_XYZ
#define LAYOUT_XYZ Layout_123
#endif
#ifndef LAYOUT_WXYZ
#define LAYOUT_WXYZ Layout_1234
#endif
#ifndef LAYOUT_TXYZ
#define LAYOUT_TXYZ Layout_1234
#endif
#ifndef LAYOUT_TWXYZ
#define LAYOUT_TWXYZ Layout_12345
#endif

    // RealVecGrids using layouts defined above.
    using Grid_XYZ = RealVecGrid_XYZ<LAYOUT_XYZ>;
    using Grid_WXYZ = RealVecGrid_WXYZ<LAYOUT_WXYZ>;
    template <idx_t tdim>
    using Grid_TXYZ = RealVecGrid_TXYZ<LAYOUT_TXYZ, tdim>;
    template <idx_t tdim>
    using Grid_TWXYZ = RealVecGrid_TWXYZ<LAYOUT_TWXYZ, tdim>;

    // RealGrids using traditional C layout.
    typedef GenericGrid3d<real_t, LAYOUT_XYZ> RealGrid_XYZ;
    typedef GenericGrid4d<real_t, LAYOUT_WXYZ> RealGrid_WXYZ;
}

#endif
